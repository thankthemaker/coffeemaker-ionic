service: coffeemaker-api

#plugins:
#  - serverless-webpack
#  - serverless-hooks-plugin

custom:
  webpackIncludeModules: true # enable auto-packing of external modules
  variables: ${file(./config.yaml)}
#    after:aws:deploy:finalize:cleanup:
#      - ./scripts/attachConfirmUserTrigger.sh
#      - ./../client/scripts/setup.sh
#    before:remove:remove:
#      - ./scripts/detach_policies.sh

provider:
  name: aws
  runtime: nodejs6.10
  stage: prod
  region: ${opt:region, self:custom.variables.region}

  # Defines permission policy for the Lambda functions.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: { "Fn::Join" : ["",["arn:aws:dynamodb:",{"Ref":"AWS::Region"},":*:*"]] }
    - Effect: Allow
      Action:
        - iot:AttachPrincipalPolicy
        - iot:DetachPrincipalPolicy
        - iot:CreatePolicy
      Resource:
        - "*"

functions:
  CreateCoffee:
    handler: src/coffee/create.handler

  GetCoffee:
    handler: src/coffee/get.main
    events:
      - http:
          path: coffees
          method: post
          cors: true
          authorizer: aws_iam

  CreateCard:
    handler: src/card/create.main
    events:
      - http:
          path: cards
          method: post
          cors: true
          authorizer: aws_iam

resources:
  Resources:
    CoffeeTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: "coffee"
        AttributeDefinitions:
          - AttributeName: cardId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: cardId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    CardTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: "card"
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: cardId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: cardId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    ConnectPolicy:
      Type: "AWS::IoT::Policy"
      Properties:
        PolicyName: IotChatConnectPolicy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action:
              - "iot:Connect"
            Resource:
              - "*"

    PublicSubscribePolicy:
      Type: "AWS::IoT::Policy"
      Properties:
        PolicyName: IotChatPublicSubscribePolicy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action:
              - "iot:Subscribe"
            Resource: { "Fn::Join" : ["",["arn:aws:iot:",{"Ref":"AWS::Region"},":",{"Ref":"AWS::AccountId"},":topicfilter/room/public/*"]] }

    PublicReceivePolicy:
      Type: "AWS::IoT::Policy"
      Properties:
        PolicyName: IotChatPublicReceivePolicy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action:
              - "iot:Receive"
            Resource: { "Fn::Join" : ["",["arn:aws:iot:",{"Ref":"AWS::Region"},":",{"Ref":"AWS::AccountId"},":topic/room/public/*"]] }

    UserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        UserPoolName: coffeemaker_user_pool
        AutoVerifiedAttributes:
          - email
        MfaConfiguration: OFF
        Schema:
          - AttributeDataType: String
            Name: email
            Required: true

    CoffeemakerAppClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        GenerateSecret: false
        RefreshTokenValidity: 200
        UserPoolId:
          Ref: UserPool

    IdentityPool:
      Type: "AWS::Cognito::IdentityPool"
      Properties:
        IdentityPoolName: coffeemaker_identity_pool
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId:
              Ref: CoffeemakerAppClient
            ProviderName:
              Fn::GetAtt: UserPool.ProviderName
        SupportedLoginProviders:
          graph.facebook.com: ${self:custom.variables.facebook_app_id}
          accounts.google.com: ${self:custom.variables.google_app_id}

    IdentityPoolAuthRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated:
                  - "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  cognito-identity.amazonaws.com:aud:
                    Ref: IdentityPool
                ForAnyValue:StringLike:
                  cognito-identity.amazonaws.com:amr: authenticated
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AWSIoTDataAccess
        Path: "/"
        Policies:
          - PolicyName: coffeemaker-invoke-api-gateway
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - execute-api:Invoke
                  Resource: { "Fn::Join" : ["", ["arn:aws:execute-api:",{"Ref":"AWS::Region"},":",{"Ref":"AWS::AccountId"},":",{"Ref":"ApiGatewayRestApi"},"/*"]] }

    IdentityPoolRoleAttachment:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: IdentityPool
        Roles:
          authenticated:
            Fn::GetAtt:
              - IdentityPoolAuthRole
              - Arn

#    ConfirmUserInvocationPermission:
#      Type: AWS::Lambda::Permission
#      Properties:
#        Action: lambda:InvokeFunction
#        FunctionName:
#          Fn::GetAtt: AutoConfirmUserLambdaFunction.Arn
#        Principal: cognito-idp.amazonaws.com
#        SourceArn:
#          Fn::GetAtt: UserPool.Arn

  Outputs:
    UserPoolId:
      Description: "The ID of the user pool that is created."
      Value:
        Ref: UserPool

    CoffeemakerAppClientId:
      Description: "The ID of the user pool ionic app client id."
      Value:
        Ref: CoffeemakerAppClient

    IdentityPoolId:
      Description: "The ID of the identity pool that is created."
      Value:
        Ref: IdentityPool

#    AutoConfirmUserFnArn:
#      Description: "The ARN of the Auto Confirm User Lambda function"
#      Value:
#        Fn::GetAtt:
#          - AutoConfirmUserLambdaFunction
#          - Arn

    FacebookAppId:
      Description: "Facebook App Id"
      Value: ${self:custom.variables.facebook_app_id}

    GoogleAppId:
      Description: "Google App Id"
      Value: ${self:custom.variables.google_app_id}